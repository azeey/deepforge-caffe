/*globals define, WebGMEGlobal*/
/*jshint browser: true*/

/**
 * Generated by VisualizerGenerator 0.1.0 from webgme on Wed Dec 23 2015 03:10:11 GMT-0600 (CST).
 */

define([
    './ModelItem',
    'text!./Table.html',
    'css!./styles/TrainedModelListWidget.css'
], function (
    ModelItem,
    TABLE_HTML
) {
    'use strict';

    var TrainedModelListWidget,
        WIDGET_CLASS = 'trained-model-list',
        nop = function(){};

    TrainedModelListWidget = function (logger, container) {
        this._logger = logger.fork('Widget');

        this.$el = container;

        this.nodes = {};
        this._initialize();

        this._logger.debug('ctor finished');
    };

    TrainedModelListWidget.prototype._initialize = function () {
        var width = this.$el.width(),
            height = this.$el.height(),
            self = this;

        // set widget class
        this.$el.addClass(WIDGET_CLASS);

        this.$content = $(TABLE_HTML);
        this.$el.append(this.$content);
        this.$list = this.$content.find('.model-list');
    };

    TrainedModelListWidget.prototype.onWidgetContainerResize = nop;

    // Adding/Removing/Updating items
    TrainedModelListWidget.prototype.addNode = function (desc) {
        if (desc) {
            var node = new ModelItem(this.$list, desc);
            this.nodes[desc.id] = node;
            node.$delete.on('click', (event) => {
                this.onModelDeleteClicked(desc.id);
                event.stopPropagation();
                event.preventDefault();
            });
            node.$el.on('click', (event) => {
                this.onModelClick(desc.id);
                event.stopPropagation();
                event.preventDefault();
            });
        }
    };

    TrainedModelListWidget.prototype.removeNode = function (gmeId) {
        var node = this.nodes[gmeId];
        node.remove();
        delete this.nodes[gmeId];
    };

    TrainedModelListWidget.prototype.updateNode = function (desc) {
        if (desc) {
            this.nodes[desc.id].update(desc);
        }
    };

    /* * * * * * * * Visualizer event handlers * * * * * * * */


    /* * * * * * * * Visualizer life cycle callbacks * * * * * * * */
    TrainedModelListWidget.prototype.destroy = function () {
    };

    TrainedModelListWidget.prototype.onActivate = function () {
    };

    TrainedModelListWidget.prototype.onDeactivate = function () {
    };

    return TrainedModelListWidget;
});
