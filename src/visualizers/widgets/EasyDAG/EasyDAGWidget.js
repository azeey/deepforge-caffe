/*globals define, WebGMEGlobal*/
/*jshint browser: true*/

/**
 * Generated by VisualizerGenerator 0.1.0 from webgme on Thu Nov 26 2015 06:07:08 GMT-0600 (CST).
 */

define([
    './lib/dagre.min',
    'common/util/assert',
    './EasyDAGWidget.Items',
    './EasyDAGWidget.Actions',
    './EasyDAGWidget.Refresh',
    './DAGItem',
    './Connection',
    './SelectionManager',
    'd3',
    'css!./styles/EasyDAGWidget.css'
], function (
    dagre,
    assert,
    EasyDAGWidgetItems,
    EasyDAGWidgetActions,
    EasyDAGWidgetRefresher,
    DAGItem,
    Connection,
    SelectionManager
) {
    'use strict';

    var EasyDAGWidget,
        WIDGET_CLASS = 'easy-dag',
        MARGIN = 20,
        DURATION = 750,
        MARGIN = 20,
        i = 0,
        CLOSED = 'closed',
        OPEN = 'open',
        LEAF = 'LEAF',
        OPENING = 'opening',
        CLOSING = 'CLOSING',
        NODE_SIZE = 15,
        COUNTER = 0;

    EasyDAGWidget = function (logger, container) {
        this._logger = logger.fork('Widget');

        this.$el = container;

        // Items
        this.items = {};
        this.connections = {};
        this.graph = new dagre.graphlib.Graph();

        this.active = false;  // TODO: may be able to merge these
        this.needsUpdate = false;
        this._initialize();
        this.resetGraph();

        EasyDAGWidgetItems.call(this);

        // Selection manager
        this.selectionManager = new SelectionManager(this);
        this._logger.debug('ctor finished');
    };

    EasyDAGWidget.prototype._initialize = function () {
        var width = this.$el.width(),
            height = this.$el.height(),
            self = this;

        //set Widget title
        this.$el.addClass(WIDGET_CLASS);
        this._$svg = d3.select(this.$el[0])
            .append('svg')

        this.$svg = this._$svg.append('g');

        this.$el[0].style.position = 'absolute';
        this._$svg.style('position', 'relative');

        // Selection
        this.$el.on('click', event => {
            event.stopPropagation();
            event.preventDefault();
            this.selectionManager.deselect();
        });

        // DAGItems
        DAGItem.prototype.onUpdate = this.refreshUI.bind(this);
        DAGItem.prototype.saveAttribute = function(attr, value) {
            self.saveAttributeForNode(this.id, attr, value);
        };
        this.resizeDAG();
    };

    EasyDAGWidget.prototype.resetGraph = function () {
        this.graph.setGraph({});
        assert(this.graph.nodes().indexOf('undefined') === -1);
        this.graph.setDefaultEdgeLabel(function() { return 'asdfas'; });
    };

    EasyDAGWidget.prototype.onWidgetContainerResize =
    EasyDAGWidget.prototype.resizeDAG = function (width, height) {
        this.refreshUI();
    };

    /* * * * * * * * Updating the In Memory DAG * * * * * * * */

    // Adding/Removing/Updating items
    EasyDAGWidget.prototype.addNode = function (desc) {
        var item;
        if (desc) {
            // Record the node info
            item = new DAGItem(this.$svg, desc);
            item.$el
                .on('click', event => {
                    d3.event.stopPropagation();
                    d3.event.preventDefault();
                    this.selectionManager.select(item);
                });

            this.items[desc.id] = item;
            this.graph.setNode(item.id, item);
        }
        this.refreshUI();
    };

    EasyDAGWidget.prototype.addConnection = function (desc) {
        var conn = new Connection(this.$svg, desc);
        this.graph.setEdge(desc.src, desc.dst, conn);

        this.connections[desc.id] = conn;
        this.refreshUI();
    };

    EasyDAGWidget.prototype.removeNode = function (gmeId) {
        if (this.items[gmeId]) {
            this._removeNode(gmeId);
        } else {
            this._removeConnection(gmeId);
        }
    };

    EasyDAGWidget.prototype._removeNode = function (gmeId) {
        var desc = this.items[gmeId];
        delete this.items[gmeId];
        this.refreshUI();
    };

    EasyDAGWidget.prototype._removeConnection = function (gmeId) {
        // Delete the subtree rooted at the dst node
        var conn = this.connections[gmeId];
        this.graph.removeEdge(conn.src, conn.dst);

        // FIXME: Move this to the refresh mixin
        this.connections[gmeId].remove();
        delete this.connections[gmeId];
        this.refreshUI();
    };

    EasyDAGWidget.prototype.updateNode = function (desc) {
        if (desc) {
            // Update the attributes displayed on the node
            this.items[desc.id].update(desc);
        }
        this.refreshUI();
    };

    EasyDAGWidget.prototype.updateConnection = function (desc) {
        // Change the tree structure
        //var oldSrc = this.graph.edge(desc.id).src,
            //oldDst = this.graph.edge(desc.id).dst;
        //if (oldSrc !== desc.src || oldDst !== desc.dst) {
            //// Remove a connection from oldSrc to oldDst
            //// TODO
            //this.addConnection(desc);
        //}
        assert(this.graph.nodes().indexOf('undefined') === -1);
        this.refreshUI();
    };

    /* * * * * * * * Visualizer life cycle callbacks * * * * * * * */
    EasyDAGWidget.prototype.destroy = function () {
    };

    EasyDAGWidget.prototype.onActivate = function () {
        this.active = true;
        //this.refreshScreen();
    };

    EasyDAGWidget.prototype.onDeactivate = function () {
        this.active = false;
    };

    // Set up inheritance
    _.extend(
        EasyDAGWidget.prototype,
        EasyDAGWidgetItems.prototype,
        EasyDAGWidgetActions.prototype,
        EasyDAGWidgetRefresher.prototype
    );

    EasyDAGWidget.prototype.refreshUI = 
        _.debounce(EasyDAGWidget.prototype.refreshScreen, 50);


    return EasyDAGWidget;
});
