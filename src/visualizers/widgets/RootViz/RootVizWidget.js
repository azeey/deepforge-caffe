/*globals define, WebGMEGlobal*/
/*jshint browser: true*/

/**
 * Generated by VisualizerGenerator 0.1.0 from webgme on Wed Dec 23 2015 11:31:06 GMT-0600 (CST).
 */

define([
    'text!./RootViz.html',
    'css!./styles/RootVizWidget.css'
], function (
    RootVizHtml
) {
    'use strict';

    var RootVizWidget,
        WIDGET_CLASS = 'root-viz';

    RootVizWidget = function (logger, container) {
        this._logger = logger.fork('Widget');

        this.$el = container;

        this.nodes = {};
        this._initialize();

        this._logger.debug('ctor finished');
    };

    RootVizWidget.prototype._initialize = function () {
        var width = this.$el.width(),
            height = this.$el.height(),
            self = this;

        // set widget class
        this.$el.addClass(WIDGET_CLASS);
        this.$el.append($(RootVizHtml));
    };

    RootVizWidget.prototype.onWidgetContainerResize = function (width, height) {
    };

    // Adding/Removing/Updating items
    var NODE_WHITELIST = {
        data: true,
        architectures: true,
        models: true
    };
    RootVizWidget.prototype.addNode = function (desc) {
        if (desc) {
            let isValid = NODE_WHITELIST[desc.name],
                htmlId,
                html;

            if (isValid) {
                htmlId = desc.name + '-node-panel';
                html = this.$el.find('#' + htmlId);
                html.addClass('panel-info');
                html.on('mouseenter', (event) => {
                    html.addClass('panel-primary');
                    html.removeClass('panel-info');
                });
                html.on('mouseleave', (event) => {
                    html.addClass('panel-info');
                    html.removeClass('panel-primary');
                });
                html.on('click', (event) => {
                    this.onNodeClick(desc.id);
                    event.stopPropagation();
                    event.preventDefault();
                });
            }
        }
    };

    RootVizWidget.prototype.removeNode = function (gmeId) {
        if (this.nodes[gmeId]) {
            var desc = this.nodes[gmeId];
            delete this.nodes[gmeId];
        }
    };

    RootVizWidget.prototype.updateNode = function (desc) {
        // nop
    };

    /* * * * * * * * Visualizer event handlers * * * * * * * */

    RootVizWidget.prototype.onNodeClick = function (id) {
        // This currently changes the active node to the given id and
        // this is overridden in the controller.
    };

    /* * * * * * * * Visualizer life cycle callbacks * * * * * * * */
    RootVizWidget.prototype.destroy = function () {
    };

    RootVizWidget.prototype.onActivate = function () {
    };

    RootVizWidget.prototype.onDeactivate = function () {
    };

    return RootVizWidget;
});
