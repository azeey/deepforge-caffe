/*globals define, _, WebGMEGlobal*/
/*jshint browser: true*/
/**
 * Generated by VisualizerGenerator 0.1.0 from webgme on Sat Oct 10 2015 10:55:29 GMT-0500 (CDT).
 */

define([
    'js/PanelBase/PanelBaseWithHeader',
    'js/Panels/ModelEditor/ModelEditorPanel',
    'widgets/CNNViz/CNNVizWidget',
    './CNNVizControl'
], function (
    PanelBaseWithHeader,
    ModelEditorPanel,
    CNNVizWidget,
    CNNVizControl
) {
    'use strict';

    var CNNVizPanel;

    CNNVizPanel = function (layoutManager, params) {
        var options = {};

        // set properties from options
        options[PanelBaseWithHeader.OPTIONS.LOGGER_INSTANCE_NAME] = 'CNNVizPanel';
        options[PanelBaseWithHeader.OPTIONS.FLOATING_TITLE] = true;

        //call parent's constructor
        PanelBaseWithHeader.apply(this, [options, layoutManager]);

        this._client = params.client;

        this._initialize(layoutManager, params);

        this.logger.debug('ctor finished');
    };

    // inherit from PanelBaseWithHeader
    _.extend(CNNVizPanel.prototype, ModelEditorPanel.prototype);

    CNNVizPanel.prototype._initialize = function () {
        var self = this;

        this.widget = new CNNVizWidget(this.logger, this.$el, {'toolBar': this.toolBar});

        this.widget.setTitle = function (title) {
            self.setTitle(title);
        };

        this.widget.onUIActivity = function () {
            WebGMEGlobal.PanelManager.setActivePanel(self);
            WebGMEGlobal.KeyboardManager.setListener(self.widget);
        };

        this.control = new CNNVizControl({
            logger: this.logger,
            client: this._client,
            widget: this.widget
        });

        this.onActivate();
    };

    return CNNVizPanel;
});
