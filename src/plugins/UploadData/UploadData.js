/*globals define*/
/*jshint node:true, browser:true*/

/**
 * Generated by PluginGenerator 0.14.0 from webgme on Fri Dec 25 2015 10:02:53 GMT-0600 (CST).
 */

define([
    'plugin/PluginConfig',
    'plugin/PluginBase'
], function (
    PluginConfig,
    PluginBase
) {
    'use strict';

    /**
     * Initializes a new instance of UploadData.
     * @class
     * @augments {PluginBase}
     * @classdesc This class represents the plugin UploadData.
     * @constructor
     */
    var UploadData = function () {
        // Call base class' constructor.
        PluginBase.call(this);
    };

    // Prototypal inheritance from PluginBase.
    UploadData.prototype = Object.create(PluginBase.prototype);
    UploadData.prototype.constructor = UploadData;

    /**
     * Gets the name of the UploadData.
     * @returns {string} The name of the plugin.
     * @public
     */
    UploadData.prototype.getName = function () {
        return 'UploadData';
    };

    /**
     * Gets the semantic version (semver.org) of the UploadData.
     * @returns {string} The version of the plugin.
     * @public
     */
    UploadData.prototype.getVersion = function () {
        return '0.1.0';
    };

    /**
     * Gets the configuration structure for the UploadData.
     * The ConfigurationStructure defines the configuration for the plugin
     * and will be used to populate the GUI when invoking the plugin from webGME.
     * @returns {object} The version of the plugin.
     * @public
     */
    UploadData.prototype.getConfigStructure = function () {
        return [
            {
                name: 'name',
                displayName: 'Name of Dataset',
                regex: '^[a-zA-Z]+$',
                regexMessage: 'Name can only contain English characters!',
                // TODO: Leave empty for file name
                description: 'Name for the uploaded dataset',
                value: '',
                valueType: 'string',
                readOnly: false
            },
            {
                name: 'images',
                displayName: 'Images',
                description: 'Select a zipped lmdb directory of images',
                value: '',
                valueType: 'asset',
                readOnly: false
            }
        ];
    };


    /**
     * Main function for the plugin to execute. This will perform the execution.
     * Notes:
     * - Always log with the provided logger.[error,warning,info,debug].
     * - Do NOT put any user interaction logic UI, etc. inside this method.
     * - callback always has to be called even if error happened.
     *
     * @param {function(string, plugin.PluginResult)} callback - the result callback
     */
    UploadData.prototype.main = function (callback) {
        var self = this,
            config = this.getCurrentConfig(),
            dataName = config.name,
            dataNode,
            nodeObject;


        // Create a new data node
        dataNode = self.core.createNode({
            parent: self.activeNode,
            base: self.META.Data
        });

        // Set the name and data hash
        self.core.setAttribute(dataNode, 'name', dataName || 'NewData');
        self.core.setAttribute(dataNode, 'data', config.images);

        self.save(`UploadData created ${dataName} dataset`, function (err) {
            if (err) {
                callback(err, self.result);
                return;
            }
            self.result.setSuccess(true);
            callback(null, self.result);
        });

    };

    return UploadData;
});
