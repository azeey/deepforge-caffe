/*globals define*/
/*jshint node:true, browser:true*/

/**
 * Generated by PluginGenerator 0.14.0 from webgme on Fri Sep 18 2015 09:17:18 GMT-0500 (CDT).
 */

define([
    'TemplateCreator/TemplateCreator',
    './CaffeOutputGenerator'
], function (SimpleNodes, CaffeTemplateCreator) {
    'use strict';

    var CONN_PTRS = ['src', 'dst'];
    /**
     * Initializes a new instance of CaffeGenerator.
     * @class
     * @augments {PluginBase}
     * @classdesc This class represents the plugin CaffeGenerator.
     * @constructor
     */
    var CaffeGenerator = function () {
        // Call base class' constructor.
        SimpleNodes.call(this);
        this.generator = new CaffeTemplateCreator();
        this.originalNode = null;
    };

    // Prototypal inheritance from PluginBase.
    CaffeGenerator.prototype = Object.create(SimpleNodes.prototype);
    CaffeGenerator.prototype.constructor = CaffeGenerator;

    /**
     * Gets the name of the CaffeGenerator.
     * @returns {string} The name of the plugin.
     * @public
     */
    CaffeGenerator.prototype.getName = function () {
        return 'Caffe Generator';
    };

    /**
     * Gets the semantic version (semver.org) of the CaffeGenerator.
     * @returns {string} The version of the plugin.
     * @public
     */
    CaffeGenerator.prototype.getVersion = function () {
        return '0.1.0';
    };

    CaffeGenerator.prototype.getConfigStructure = function(){
        // TODO: Should I add base learning rate, etc, here?
        return [
            /* Data info */
            // FIXME: Add batch size?
            {  // Data source
                name: 'inputData',
                displayName: 'Input Data',
                description: 'URL of the input data',
                value: 'examples/mnist/lenet',  // TODO: Create a better example here
                valueType: 'string',
                readOnly: false
            },
            {  // Data source type
                name: 'dataType',
                displayName: 'Input Data Type',
                description: 'Format of the input data',
                value: 'LMDB',
                valueType: 'string',
                valueItems: [
                    'LMDB',
                    'LEVELDB'
                ],
                readOnly: false
            },

            /* Training/Testing info */
            {  // Forward pass count (test_iter)
                name: 'testIter',
                displayName: 'Test Iterations',
                description: 'Number of forward passes',
                value: 100,
                valueType: 'number',
                minValue: 0,
                readOnly: false
            },
            {  // Test interval
                name: 'testInterval',
                displayName: 'Test Interval',
                description: 'Test every X training iterations',
                value: 500,
                valueType: 'number',
                minValue: 0,
                readOnly: false
            },
            {  // Max iterations (maxIter)
                name: 'maxIter',
                displayName: 'Max Iterations',
                description: 'Max number of iterations',
                value: 10000,
                valueType: 'number',
                minValue: 0,
                readOnly: false
            },
            // TODO: This can be ignored/auto set
            // Ideally, we can provide feedback to the user from cli output
            {  // Display FIXME: this may not matter
                name: 'display',
                displayName: 'Display iterations',
                description: 'Frequency of displaying current status',
                value: 100,
                valueType: 'number',
                minValue: 0,
                readOnly: false
            },
            // TODO: This can be ignored/auto set
            {  // Snapshot iterations (snapshot)
                name: 'snapshot',
                displayName: 'Snapshot iterations',
                description: 'Frequency of collecting snapshots',
                value: 5000,
                valueType: 'number',
                minValue: 0,
                readOnly: false
            },
            // TODO: This can be ignored/auto set
            {  // Snapshot prefix (snapshotPrefix)
                name: 'snapshotPrefix',
                displayName: 'Snapshot directory',
                description: 'Directory to store the snapshots',
                value: 'examples/mnist/lenet',
                valueType: 'string',
                readOnly: false
            },
            {  // Solver mode (GPU/CPU)
                name: 'usingGPU',
                displayName: 'Use GPU',
                description: 'Perform computation on the GPU or CPU',
                value: true,
                valueType: 'boolean',
                readOnly: false
            }
        ];
    };

    /**
     * Main function for the plugin to execute. This will perform the execution.
     * Notes:
     * - Always log with the provided logger.[error,warning,info,debug].
     * - Do NOT put any user interaction logic UI, etc. inside this method.
     * - callback always has to be called even if error happened.
     *
     * @param {function(string, plugin.PluginResult)} callback - the result callback
     */
    CaffeGenerator.prototype.main = function (callback) {
        var self = this,
            config = this.getCurrentConfig();

        config.solverMode = config.usingGPU ? 'GPU' : 'CPU';
        this.generator.runOptions = config;
        this.generator.lossLayers = this._getLossLayerNames();

        // TODO: Check that the current node is a 'CNN' or 'NeuralNetwork'
        // Add the data layer. I can change the model and simply not save it.

        // Change the activeNode to originalNode and store the copy in
        // activeNode
        self.originalNode = self.activeNode;
        self.activeNode = self.core.copyNode(self.originalNode, self.rootNode);

        self.retrieveDataLayer(function(err) {
            if (err) {
                return callback(err, self.result);
            }
            self.beforePrototxtGeneration(function(err) {
                if (err) {
                    return callback(err, self.result);
                }
                SimpleNodes.prototype.main.call(self, callback);
            });
        });
    };

    CaffeGenerator.prototype._getLossLayerNames = function() {
        var self = this,
            nodeBase = this.META.LossBaseLayer;

        return Object.keys(this.META)
            .filter(function(name) {
                var node = self.META[name];
                return node !== nodeBase && self.isMetaTypeOf(node, nodeBase);
            })
            .map(function(name) {
                return name.toLowerCase();
            });
    };

    // This is overridden in the CaffeTrainer
    CaffeGenerator.prototype.beforePrototxtGeneration = function (callback) {
        callback();
    };

    CaffeGenerator.prototype.retrieveDataLayer = function (callback) {
        var self = this;

        self.core.loadChildren(self.activeNode, function(err, children) {
            if (err) {
                return callback(err);
            }
            // Find the input node
            var input = children.filter(function(child) {
                return self.isMetaTypeOf(child, self.META.Input);
            })[0];

            if (!input) {
                return callback('No input node found');
            }
            var dataPath = self.core.getPointerPath(input, 'data'),
                inputPath = self.core.getPath(input);

            if (!dataPath) {
                return callback('Cannot create CNN without input data');
            }

            // Find the data node
            self.core.loadByPath(self.rootNode, dataPath, function(e, dataNode) {
                var conns;
                if (e) {
                    return callback(e);
                }

                // Find the input node's connections
                conns = children
                    .filter(function(node) {  // Get all connections
                        var ptrs = self.core.getPointerNames(node);
                        return ptrs.indexOf('src') > -1 && ptrs.indexOf('dst') > -1;
                    })
                    // Connections with at least one pointer to input
                    .filter(function(conn) {
                        return CONN_PTRS
                            .reduce(function(match, ptr) {
                                return match ||
                                    self.core.getPointerPath(conn, ptr) === inputPath;
                            }, false)
                    });

                // Remove the input node
                self.core.deleteNode(input);

                // Copy the data node to the activeNode
                var dataCopy = self.core.copyNode(dataNode, self.activeNode)

                // Set all the connections to the data node
                conns.forEach(function(conn) {
                    CONN_PTRS.forEach(function(ptr) {
                        if (self.core.getPointerPath(conn, ptr) === null) { 
                            self.core.setPointer(conn, ptr, dataCopy);
                        }
                    });
                });
                callback();
            });
        });
    };

    CaffeGenerator.prototype.revert = function () {
        if (this.originalNode) {  // Delete the activeNode
            this.core.deleteNode(this.activeNode);
            this.activeNode = this.originalNode;
            this.originalNode = null;
        } else {
            console.error('Trying to revert without an original node');
        }
    };

    return CaffeGenerator;
});
